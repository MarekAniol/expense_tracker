// Mocks generated by Mockito 5.4.2 from annotations
// in expense_tracker/test/domain/service/expense_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:expense_tracker/domain/data/expense_data_source.dart' as _i2;
import 'package:expense_tracker/domain/models/expense.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ExpenseDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseDataSource extends _i1.Mock implements _i2.ExpenseDataSource {
  @override
  _i3.Future<void> saveExpense(_i4.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #saveExpense,
          [expense],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.Expense>> getAllExpenses() => (super.noSuchMethod(
        Invocation.method(
          #getAllExpenses,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Expense>>.value(<_i4.Expense>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Expense>>.value(<_i4.Expense>[]),
      ) as _i3.Future<List<_i4.Expense>>);
  @override
  _i3.Future<void> deleteExpense(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteExpense,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
